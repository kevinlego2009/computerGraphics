
#include "polyscope/polyscope.h"

#include "polyscope/floating_render_image.h"

#include "imgui.h"

namespace polyscope {


FloatingRenderImageQuantity::FloatingRenderImageQuantity(Structure& parent_, std::string name, size_t dimX, size_t dimY,
                                                         const std::vector<double>& depthData,
                                                         const std::vector<glm::vec3>& normalData)
    : FloatingQuantity(name, parent_), color(uniquePrefix() + "#color", getNextUniqueColor()),
      material(uniquePrefix() + "#material", "clay"), transparency(uniquePrefix() + "#transparency", 1.0), dimX(dimX_),
      dimY(dimY_) {}

size_t FloatingRenderImageQuantity::nPix() { return dimX * dimY; }

void FloatingRenderImageQuantity::draw() {
  if (!isEnabled()) return;
  ImageScalarArtist::renderSource();
}

void FloatingRenderImageQuantity::drawDelayed() {
  if (!isEnabled()) return;
  if (getShowFullscreen()) {
    ImageScalarArtist::showFullscreen();
  }
}

void FloatingRenderImageQuantity::buildCustomUI() {
  ImGui::SameLine();

  // == Options popup
  if (ImGui::Button("Options")) {
    ImGui::OpenPopup("OptionsPopup");
  }

  if (ImGui::SliderFloat("transparency", &transparency.get(), 0.f, 1.f)) {
    transparency.manuallyChanged();
    requestRedraw();
  }

  // Render images are always shown fullscreen, rather than in an imgui window
}


void FloatingRenderImageQuantity::refresh() {
  ImageScalarArtist::refresh();
  Quantity::refresh();
}

std::string FloatingRenderImageQuantity::niceName() { return name + " (render image)"; }

FloatingRenderImageQuantity* FloatingRenderImageQuantity::setEnabled(bool newEnabled) {
  if (newEnabled == isEnabled()) return this;
  if (newEnabled) {
    // if drawing fullscreen, disable anything else which was already drawing fullscreen
    disableAllFullscreenArtists();
  }
  enabled = newEnabled;
  requestRedraw();
  return this;
}

void FloatingRenderImageQuantity::disableFullscreenDrawing() {
  if (isEnabled() && parent.isEnabled()) {
    setEnabled(false);
  }
}

} // namespace polyscope
